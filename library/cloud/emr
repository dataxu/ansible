#!/usr/bin/python
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

import sys
import time
from datetime import datetime

try:
    import boto.emr
    from boto.emr.connection import EmrConnection
    from boto.emr.instance_group import InstanceGroup
    from boto.emr.step import StreamingStep
    from boto.emr.step import InstallHiveStep
    from boto.emr.bootstrap_action import BootstrapAction
except ImportError:
    print "failed=True msg='boto.emr required for this module'"
    sys.exit(1)

class ElasticMapReduceManager(object):
    """ Manages an elastic map reduce cluster. """

    def __init__(self, module, aws_access_key, aws_secret_key, region, ec2_keyname, 
                 cluster_name, bootstrap_actions, log_uri, vpc_subnet_id, 
                 ami_version, jobflow_role, visible_to_all_users, instance_groups, 
                 hive_steps):

        self.module = module
        self.aws_access_key = aws_access_key
        self.aws_secret_key = aws_secret_key
        self.region = region
        self.ec2_keyname = ec2_keyname
        self.cluster_name = cluster_name
        self.bootstrap_actions = bootstrap_actions
        self.log_uri = log_uri
        self.vpc_subnet_id = vpc_subnet_id
        self.ami_version = ami_version
        self.jobflow_role = jobflow_role
        self.visible_to_all_users = visible_to_all_users
        self.instance_groups = instance_groups
        self.hive_steps = hive_steps

        self.changed = False
        self.data = None
        self.job_id = None

        self.conn = self.get_elasticmap_reduce_connection()
        self.jobflow_instance_groups = self.set_jobflow_instance_groups()
        self.jobflow_bootstrap_actions = self.set_jobflow_bootstrap_actions()
        self.jobflow_hive_steps = self.set_jobflow_hive_steps()
        self.jobflow_stream_steps = self.set_jobflow_stream_steps()

    def get_info(self):
        """ Return basic info about the EMR cluster. """

        info = {
            'connection': self.conn,
            'region': self.region,
            'jobid': self.job_id,
        }
        # if self.data:
        #     info['data'] = self.data

        return info

    def get_elasticmap_reduce_connection(self):
        """
        Connect to EMR on specific region.
        """

        try:
            self.conn = boto.emr.connect_to_region(self.region, 
                                                   aws_access_key_id=self.aws_access_key,
                                                   aws_secret_access_key=self.aws_secret_key)

        except boto.exception.NoAuthHandlerFound, e:
            self.module.fail_json(msg="Unable to create connection: {0}".format(str(e)))

    def set_jobflow_instance_groups(self):
        """
        :param module: AnsibleModule object
        :returns list: list of boto.emr.InstanceGroup objects
        """

        jobflow_instance_groups = []

        for ig in self.instance_groups:
            group_type = ig.get('group_type', None)
            instance_type = ig.get('instance_type', None)
            instance_count = ig.get('count', 1)
            my_spot = self.module.boolean(ig.get('spot'))
            my_bidprice = ig.get('bidprice', None)

            if my_spot:
                my_market='SPOT'
                if not my_bidprice:
                    self.module.fail_json(msg='SPOT instances require a bidprice')
            else:
                my_market='ON_DEMAND'

            jobflow_instance_groups.append(InstanceGroup(int(instance_count),
                                                         group_type.upper(),
                                                         instance_type,
                                                         my_market,
                                                         "{0}_GROUP".format(group_type.upper()),
                                                         bidprice=my_bidprice))
        return(jobflow_instance_groups)

    def set_jobflow_bootstrap_actions(self):
        """
        :param module: AnsibleModule object
        :returns list: list of boto.emr.emrobject.BootstrapAction objects
        """

        my_bootstrap_actions = []

        args = []
        for bootstrap in self.bootstrap_actions:
            raw_args = bootstrap.get('args', None)
            if raw_args:
                args = raw_args.split(',')

            my_bootstrap_actions.append(BootstrapAction(bootstrap['name'],
                                                        bootstrap['action'],
                                                        args))
        return(my_bootstrap_actions)

    def set_jobflow_hive_steps(self):
        """
        :param module: AnsibleModule object
        :returns list: list of boto.emr.step.InstallHiveStep objects
        """

        jobflow_hive_steps = []
        for hs in self.hive_steps:
            version = hs.get('version', None)
            site = hs.get('site', None)
            jobflow_hive_steps.append(InstallHiveStep(hive_versions=version,
                                                      hive_site=site))
        return(jobflow_hive_steps)

    def set_jobflow_stream_steps(self):
        """
        :param module: AnsibleModule object
        :returns list: list of boto.emr.step.StreamingStep objects
        """

        current_time = datetime.now().strftime("%Y%m%d%H%M%S")
        output_log_uri = '{0}/wordcount_output/{1}'.format(self.log_uri, current_time)

        stream_steps = [StreamingStep(name='sarmit wordcount ansible',
                                      mapper='s3n://elasticmapreduce/samples/wordcount/wordSplitter.py',
                                      reducer='aggregate',
                                      input='s3n://elasticmapreduce/samples/wordcount/input',
                                      output=output_log_uri)]
        return(stream_steps)

    def run_jobflow(self):
        """
        :returns EMR object: The ID of the created job flow
        """

        if self.vpc_subnet_id:
            my_api_params = {'Instances.Ec2SubnetId': self.vpc_subnet_id}
        else:
            my_api_params = None

        self.job_id = self.conn.run_jobflow(name=self.cluster_name,
                                            ec2_keyname=self.ec2_keyname,
                                            log_uri='{0}/jobflow_logs_{1}'.format(self.log_uri, datetime.now().strftime("%Y%m%d%H%M%S")),
                                            api_params=my_api_params,
                                            ami_version=self.ami_version,
                                            job_flow_role=self.jobflow_role,
                                            visible_to_all_users=self.visible_to_all_users,
                                            instance_groups=self.jobflow_instance_groups,
                                            bootstrap_actions=self.jobflow_bootstrap_actions,
                                            steps=self.jobflow_stream_steps + self.jobflow_hive_steps)

def main():
    module = AnsibleModule(
        argument_spec=dict(
            ec2_keyname={'required': True},
            ec2_secret_key={'default': None,
                            'aliases': ['aws_secret_key', 'secret_key'],
                            'no_log': True},
            ec2_access_key={'default': None,
                            'aliases': ['aws_access_key', 'access_key']},
            region={'required': False, 'default': None, 'aliases': ['aws_region', 'ec2_region'], 'choices': AWS_REGIONS},
            cluster_name={'required': True},
            bootstrap_actions={'type': 'list', 'default': None},
            log_uri={'required': True},
            vpc_subnet_id={'required': False},
            ami_version={'required': False, 'choices': ['1.0', '2.0', 'latest'], 'default': 'latest'},
            jobflow_role={'default': None, 'aliases': ['iamrole']},
            visible_to_all_users={'required': False, 'default': False},
            instance_groups={'required': True, 'type': 'list', 'default': None},
            hive_steps={'type': 'list', 'default': None},
        )
    )

    ec2_url, aws_access_key, aws_secret_key, region = get_ec2_creds(module)

    ec2_keyname = module.params['ec2_keyname']
    cluster_name = module.params['cluster_name']
    bootstrap_actions = module.params['bootstrap_actions']
    log_uri = module.params['log_uri']
    vpc_subnet_id = module.params['vpc_subnet_id']
    ami_version = module.params['ami_version']
    jobflow_role = module.params['jobflow_role']
    visible_to_all_users = module.params['visible_to_all_users']
    instance_groups = module.params['instance_groups']
    hive_steps = module.params['hive_steps']

    boto.set_stream_logger('boto')

    if not region:
        module.fail_json(msg=str("Either region or EC2_REGION environment variable must be set."))

    emrm = ElasticMapReduceManager(module, aws_access_key, 
                                   aws_secret_key, region, 
                                   ec2_keyname, cluster_name,
                                   bootstrap_actions, log_uri, 
                                   vpc_subnet_id, ami_version,
                                   jobflow_role, 
                                   visible_to_all_users, 
                                   instance_groups, hive_steps)

    # emrm.run_jobflow()
    facts_result = dict(changed=emrm.changed,
                        elasticmapreduce=emrm.get_info())

    module.exit_json(**facts_result)

# import module snippets
from ansible.module_utils.basic import *
from ansible.module_utils.ec2 import *

main()
